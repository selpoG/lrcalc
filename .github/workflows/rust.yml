name: Rust

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            components: rustfmt, clippy
            override: true
      - name: Check format (main + helper project)
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: Check format (python project)
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all --manifest-path python/Cargo.toml -- --check
      - name: Build
        run: |
          cargo build --verbose
          cargo build --manifest-path lrcalc_helper/Cargo.toml
          cargo build --manifest-path python/Cargo.toml
      - name: Run clippy (main project)
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features
      - name: Run clippy (helper project)
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --manifest-path lrcalc_helper/Cargo.toml
      - name: Run clippy (python project)
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --manifest-path python/Cargo.toml
      - name: Run tests
        run: cargo test --verbose
      - name: Run testsuits
        run: ./testsuite
  python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.6"
    steps:
      - uses: actions/checkout@v2
      - name: Use Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.6
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        working-directory: ./python
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-linting-${{ hashFiles('**/python/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ matrix.python-version }}-linting-
            venv-${{ runner.os }}-${{ matrix.python-version }}-
            venv-${{ runner.os }}-
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        working-directory: ./python
        run: poetry install --no-interaction --no-root
      - run: poetry run black --check .
        working-directory: ./python
      - run: poetry run isort -c .
        working-directory: ./python
      - run: poetry run maturin develop
        working-directory: ./python
      - run: poetry run python -m unittest
        working-directory: ./python
